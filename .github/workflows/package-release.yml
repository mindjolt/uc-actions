name: 'Package Release'

on:
  workflow_call:
    inputs:
      sdk_name:
        type: string
        required: true
      branch:
        type: string
        required: true
      version:
        type: string
        required: true
      slack_channel:
        type: string
        required: true
      dry_run:
        type: boolean
        required: true
    secrets:
      repository_token:
        required: true
      artifactory_root:
        required: true
      artifactory_user:
        required: true
      artifactory_password:
        required: true
      slack_token:
        required: true

jobs:
  build-and-release-package:
    name: 'Build and Release Package'
    runs-on: ['self-hosted', 'macOS', 'unity', 'unity-core']
    defaults:
      run:
        shell: bash

    env:
      PROJECT_NAME: '${{ inputs.sdk_name }}'
      PACKAGE_NAME: 'JamCity.${{ inputs.sdk_name }}'
      PROJECT_PATH: 'Assets/Plugins/JamCity/JamCity.${{ inputs.sdk_name }}'
      RELEASE_PATH: 'Assets/Plugins/JamCity/JamCity.${{ inputs.sdk_name }}/Editor/Release'

    steps:
      - name: 'Validate Release Version'
        run: |
          echo "${{ inputs.version }}" | grep -E '^\d+(?:\.\d+){2}$' || (echo 'Specified version number is invalid -- expected format: x.y.z' && false)

      - name: 'Validate Release Branch'
        if: ${{ inputs.branch }} == 'develop'
        run: |
          [ "${{ inputs.branch }}" != 'develop' ] || (echo "Releases cannot be made from the '${{ inputs.branch }}' branch" && false)

      - name: Cloning ${{ github.ref }}
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.branch }}

      - name: 'Update change log'
        uses: mindjolt/uc-actions/update-changelog@main
        with:
          version: ${{ inputs.version }}

      - name: 'Create package'
        working-directory: ${{ env.RELEASE_PATH }}
        run: ./gradlew createPackage
        env:
          PACKAGE_VERSION: ${{ inputs.version }}

      - name: 'Rename zip artifact'
        working-directory: ${{ env.RELEASE_PATH }}/build/${{ env.PACKAGE_NAME }}/${{ env.PACKAGE_NAME }}
        run: mv package.zip ${{ env.PACKAGE_NAME }}.zip

      - name: 'Update package artifacts'
        run: |
          cp ${{ env.RELEASE_PATH }}/build/${{ env.PACKAGE_NAME }}/${{ env.PACKAGE_NAME }}/package.json ${{ env.PROJECT_PATH }}/package.json
          unzip -o -j -d ${{ env.PROJECT_PATH }} ${{ env.RELEASE_PATH }}/build/${{ env.PACKAGE_NAME }}/${{ env.PACKAGE_NAME }}/${{ env.PACKAGE_NAME }}.zip ${{ env.PACKAGE_NAME }}/JamCityBuildInfo.cs

      - name: 'Commit changes'
        run: |
          git add CHANGELOG.md ${{ env.PROJECT_PATH }}/package.json ${{ env.PROJECT_PATH }}/JamCityBuildInfo.cs
          git commit -m "Files updated for ${{ env.PROJECT_NAME }} ${{ inputs.version }} release."

      - name: 'Push changes to GitHub'
        if: ${{ !inputs.dry_run }}
        run: git push

      - name: 'Publish release on GitHub'
        if: ${{ !inputs.dry_run }}
        uses: mindjolt/uc-actions/publish-release@main
        with:
          token: ${{ secrets.repository_token }}
          version: ${{ inputs.version }}
          ref: ${{ inputs.branch }}

      - name: 'Publish to Artifactory'
        if: ${{ !inputs.dry_run }}
        uses: mindjolt/actions/package-manager-publish@v2
        with:
          rootUrl: ${{ secrets.artifactory_root }}
          user: ${{ secrets.artifactory_user }}
          password: ${{ secrets.artifactory_password }}
          packageZip: ${{ env.RELEASE_PATH }}/build/${{ env.PACKAGE_NAME }}/${{ env.PACKAGE_NAME }}/${{ env.PACKAGE_NAME }}.zip
          packageJson: ${{ env.RELEASE_PATH }}/build/${{ env.PACKAGE_NAME }}/${{ env.PACKAGE_NAME }}/package.json
          branchRef: ${{ github.ref }}

      - name: 'Post to Slack'
        if: ${{ !inputs.dry_run }}
        uses: mindjolt/uc-actions/post-to-slack@main
        with:
          token: ${{ secrets.slack_token }}
          channel: ${{ inputs.slack_channel }}
          project_name: ${{ env.PROJECT_NAME }}
          version: ${{ inputs.version }}

      - name: 'Upload Artifacts'
        uses: actions/upload-artifact@v2
        with:
          path: |
            ${{ env.RELEASE_PATH }}/build/${{ env.PACKAGE_NAME }}/${{ env.PACKAGE_NAME }}/${{ env.PACKAGE_NAME }}.zip
            ${{ env.RELEASE_PATH }}/build/${{ env.PACKAGE_NAME }}/${{ env.PACKAGE_NAME }}/package.json
