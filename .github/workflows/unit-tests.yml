name: 'Run Unit Tests'

on:
  workflow_call:
    inputs:
      sdk_name:
        type: string
        required: true
      target_ref:
        type: string
        required: true
      test_arguments:
        type: string
        default: ''
        required: false
      optional_dependencies:
        type: boolean
        required: true
      enable_submodules:
        type: boolean
        default: false
        required: false
    secrets:
      artifactory_root:
        required: true
      mj_github_token:
        required: true

jobs:
  run-tests:
    name: 'Run Tests'
    runs-on: ['self-hosted', 'macOS', 'unity', 'unity-core']
    strategy:
      fail-fast: false
      matrix:
        UNITY_PLATFORM: ['Android', 'OSXUniversal', 'iOS', 'WebGL']
        UNITY_VERSION: ['2020.3.44f1', '2021.3.18f1']
    env:
      TARGET_PACKAGE: 'JamCity.${{ inputs.sdk_name }}'
      UNITY_COMMAND: '/Applications/Unity/Hub/Editor/${{ matrix.UNITY_VERSION }}/Unity.app/Contents/MacOS/Unity -buildTarget ${{ matrix.UNITY_PLATFORM }} -projectPath ${{ github.workspace }}/${{ matrix.UNITY_VERSION }} -batchmode -logfile -'
      EXECUTE_INSTALL_PACKAGE: '-executeMethod JamCity.UnityCoreTests.Editor.PackageCatalogUtility.InstallPackage -withParams'
      PACKAGE_PATH: '${{ github.workspace }}/Target/Assets/Plugins/JamCity/JamCity.${{ inputs.sdk_name }}'
      PLUGIN_PATH: '${{ github.workspace }}/${{ matrix.UNITY_VERSION }}/Assets/Plugins/JamCity/JamCity.${{ inputs.sdk_name }}'
      MANIFEST_PATH: '${{github.workspace }}/${{ matrix.UNITY_VERSION }}/Packages/manifest.json'
      RUN_EDITOR_TESTS: '-runEditorTests ${{ inputs.test_arguments }} -testCategory "!Performance" -editorTestsResultFile'
      FILE_NAME: 'EditorTestResults_${{ matrix.UNITY_PLATFORM }}.xml'

    steps:
      - name: 'Checkout UnityCoreTests'
        uses: actions/checkout@v3
        with:
          repository: mindjolt/UnityCoreTests
          token: ${{ secrets.mj_github_token }}

      - name: 'Checkout Package'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.target_ref }}
          path: ${{ github.workspace }}/Target
          token: ${{ fromJSON(inputs.enable_submodules) && secrets.mj_github_token || github.token }}
          submodules: ${{ fromJSON(inputs.enable_submodules) && 'recursive' || 'false' }}

      - name: 'Set Unity Version'
        run: ln -s ${{ github.workspace }}/Source ${{ github.workspace }}/${{ matrix.UNITY_VERSION }}/Assets

      - name: 'Determine Package Version'
        id: 'package_version'
        run: |
          echo "value=$(jq -r '.version' ${{ env.PACKAGE_PATH }}/package.json)" >> $GITHUB_OUTPUT

      - name: 'Create Package'
        id: 'create_package'
        uses: mindjolt/uc-actions/create-package@main
        with:
          artifactory_root: ${{ secrets.artifactory_root }}
          package_version: ${{ steps.package_version.outputs.value }}
          source_path: ${{ env.PACKAGE_PATH }}

      - name: 'Configure Unity Packages'
        run: |
          if [[ -f "${{ github.workspace }}/Target/Packages/manifest.json" ]]; then
              echo $(jq -s '.[0] * .[1]' "${{ github.workspace }}/Target/Packages/manifest.json" "${{ env.MANIFEST_PATH }}") > "${{ env.MANIFEST_PATH }}"
          fi

      - name: 'Select Dependency Type'
        id: dependencies
        run: |
          if [ "${{ inputs.optional_dependencies }}" == "true" ]; then
            echo "value=optional" >> $GITHUB_OUTPUT
          else
            echo "value=required" >> $GITHUB_OUTPUT
          fi

      - name: 'Install Required Dependencies'
        if: ${{ !inputs.optional_dependencies }}
        run: ${{ env.UNITY_COMMAND }} ${{ env.EXECUTE_INSTALL_PACKAGE }} ${{ steps.create_package.outputs.zip_path }}

      - name: 'Install Optional Dependencies'
        if: ${{ inputs.optional_dependencies }}
        run: ${{ env.UNITY_COMMAND }} ${{ env.EXECUTE_INSTALL_PACKAGE }} ${{ steps.create_package.outputs.zip_path }} --optional

      - name: 'Copy Tests into Project'
        run: |
          mkdir -p ${{ env.PLUGIN_PATH }}/Editor/Tests
          cp -R ${{ env.PACKAGE_PATH }}/Editor/Tests/ ${{ env.PLUGIN_PATH }}/Editor/Tests/

      - name: 'Run Unit Tests'
        run: ${{ env.UNITY_COMMAND }} ${{ env.RUN_EDITOR_TESTS }} ${{ env.FILE_NAME }}

      - name: 'Upload Test Results'
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-results-${{ matrix.UNITY_PLATFORM }}-${{ matrix.UNITY_VERSION }}-${{ steps.dependencies.outputs.value }}
          path: ${{ matrix.UNITY_VERSION }}/EditorTestResults*.xml

      - name: 'Report Failed Unit Tests'
        uses: mindjolt/uc-actions/analyze-test-results@main
        with:
          name: test-results (${{ matrix.UNITY_PLATFORM }}, ${{ matrix.UNITY_VERSION }})
          files: ${{ matrix.UNITY_VERSION }}/${{ env.FILE_NAME }}
